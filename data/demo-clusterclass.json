{
  "apiVersion": "cluster.x-k8s.io/v1beta1",
  "kind": "ClusterClass",
  "metadata": {
    "creationTimestamp": "2024-06-26T15:04:00Z",
    "generation": 1,
    "labels": {
      "clusterstack.x-k8s.io/instance": "owned"
    },
    "managedFields": [
      {
        "apiVersion": "cluster.x-k8s.io/v1beta1",
        "fieldsType": "FieldsV1",
        "fieldsV1": {
          "f:metadata": {
            "f:labels": {
              "f:clusterstack.x-k8s.io/instance": {}
            }
          },
          "f:spec": {
            "f:controlPlane": {
              "f:machineInfrastructure": {
                "f:ref": {}
              },
              "f:ref": {}
            },
            "f:infrastructure": {
              "f:ref": {}
            },
            "f:patches": {},
            "f:variables": {},
            "f:workers": {
              "f:machineDeployments": {}
            }
          }
        },
        "manager": "kubectl",
        "operation": "Apply",
        "time": "2024-06-26T15:04:00Z"
      },
      {
        "apiVersion": "cluster.x-k8s.io/v1beta1",
        "fieldsType": "FieldsV1",
        "fieldsV1": {
          "f:status": {
            ".": {},
            "f:conditions": {},
            "f:observedGeneration": {},
            "f:variables": {}
          }
        },
        "manager": "manager",
        "operation": "Update",
        "subresource": "status",
        "time": "2024-06-26T15:04:00Z"
      }
    ],
    "name": "openstack-alpha-1-28-v4",
    "namespace": "kaas-playground0",
    "resourceVersion": "9663927",
    "uid": "ff56f9f9-c1e9-47cc-9218-b51a645beab3"
  },
  "spec": {
    "controlPlane": {
      "machineInfrastructure": {
        "ref": {
          "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
          "kind": "OpenStackMachineTemplate",
          "name": "openstack-alpha-1-28-v4-control-plane",
          "namespace": "kaas-playground0"
        }
      },
      "metadata": {},
      "ref": {
        "apiVersion": "controlplane.cluster.x-k8s.io/v1beta1",
        "kind": "KubeadmControlPlaneTemplate",
        "name": "openstack-alpha-1-28-v4-control-plane",
        "namespace": "kaas-playground0"
      }
    },
    "infrastructure": {
      "ref": {
        "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
        "kind": "OpenStackClusterTemplate",
        "name": "openstack-alpha-1-28-v4-cluster",
        "namespace": "kaas-playground0"
      }
    },
    "patches": [
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/image/filter/name",
                "valueFrom": {
                  "template": "ubuntu-capi-image-{{ .builtin.cluster.topology.version }}"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "controlPlane": true,
                "machineDeploymentClass": {
                  "names": [
                    "openstack-alpha-1-28-v4"
                  ]
                }
              }
            }
          }
        ],
        "description": "Sets the openstack node image for workers and the controlplane to the cluster-api image with the version mentioned in spec.topology.version.",
        "name": "k8s_version"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/flavor",
                "valueFrom": {
                  "variable": "controller_flavor"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "controlPlane": true
              }
            }
          }
        ],
        "description": "Sets the openstack instance flavor for the KubeadmControlPlane.",
        "enabledIf": "{{ ne .controller_flavor \"\" }}",
        "name": "controller_flavor"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/flavor",
                "valueFrom": {
                  "variable": "worker_flavor"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "machineDeploymentClass": {
                  "names": [
                    "openstack-alpha-1-28-v4"
                  ]
                }
              }
            }
          }
        ],
        "description": "Sets the openstack instance flavor for the worker nodes.",
        "enabledIf": "{{ ne .worker_flavor \"\" }}",
        "name": "worker_flavor"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "add",
                "path": "/spec/template/spec/rootVolume",
                "valueFrom": {
                  "template": "sizeGiB: {{ .controller_root_disk }}\n"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "controlPlane": true
              }
            }
          }
        ],
        "description": "Sets the root disk size in GiB for control-plane nodes.",
        "enabledIf": "{{ if .controller_root_disk }}true{{end}}",
        "name": "controller_root_disk"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "add",
                "path": "/spec/template/spec/rootVolume",
                "valueFrom": {
                  "template": "sizeGiB: {{ .worker_root_disk }}\n"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "machineDeploymentClass": {
                  "names": [
                    "openstack-alpha-1-28-v4"
                  ]
                }
              }
            }
          }
        ],
        "description": "Sets the root disk size in GiB for worker nodes.",
        "enabledIf": "{{ if .worker_root_disk }}true{{end}}",
        "name": "worker_root_disk"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/externalNetwork/id",
                "valueFrom": {
                  "variable": "external_id"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackClusterTemplate",
              "matchResources": {
                "infrastructureCluster": true
              }
            }
          }
        ],
        "description": "Sets the ID of an external OpenStack Network. This is necessary to get public internet to the VMs.",
        "enabledIf": "{{ ne .external_id \"\" }}",
        "name": "external_id"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/managedSubnets",
                "valueFrom": {
                  "template": "- cidr: '{{ .node_cidr }}'\n  dnsNameservers:\n  {{- range .dns_nameservers }}\n                  - {{ . }}\n  {{- end }}\n"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackClusterTemplate",
              "matchResources": {
                "infrastructureCluster": true
              }
            }
          }
        ],
        "description": "Sets the NodeCIDR and optional nameservers for the OpenStack Subnet to be created. Cluster actuator will create a network, a subnet with NodeCIDR, and a router connected to this subnet.",
        "enabledIf": "{{ ne .node_cidr \"\" }}",
        "name": "subnet"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "add",
                "path": "/spec/template/spec/securityGroups",
                "valueFrom": {
                  "template": "[ {{ range .openstack_security_groups }} { filter: { name: {{ . }}}}, {{ end }} ]"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "controlPlane": true,
                "machineDeploymentClass": {
                  "names": [
                    "openstack-alpha-1-28-v4"
                  ]
                }
              }
            }
          },
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/managedSecurityGroups/allowAllInClusterTraffic",
                "value": false
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackClusterTemplate",
              "matchResources": {
                "infrastructureCluster": true
              }
            }
          }
        ],
        "description": "Sets the list of the openstack security groups for the worker and the controlplane instances.",
        "enabledIf": "{{ if .openstack_security_groups }}true{{end}}",
        "name": "openstack_security_groups"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/apiServerLoadBalancer/enabled",
                "valueFrom": {
                  "variable": "openstack_loadbalancer_apiserver"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackClusterTemplate",
              "matchResources": {
                "infrastructureCluster": true
              }
            }
          }
        ],
        "description": "Enables custom load balancer for OpenStack API server",
        "name": "openstack_loadbalancer_apiserver"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "add",
                "path": "/spec/template/spec/apiServerLoadBalancer/provider",
                "valueFrom": {
                  "variable": "openstack_loadbalancer_apiserver_provider"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackClusterTemplate",
              "matchResources": {
                "infrastructureCluster": true
              }
            }
          }
        ],
        "description": "Sets the name of the load balancer provider.",
        "enabledIf": "{{ ne .openstack_loadbalancer_apiserver_provider \"\" }}",
        "name": "openstack_loadbalancer_apiserver_provider"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/identityRef/cloudName",
                "valueFrom": {
                  "variable": "cloud_name"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackClusterTemplate",
              "matchResources": {
                "infrastructureCluster": true
              }
            }
          },
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/identityRef/cloudName",
                "valueFrom": {
                  "variable": "cloud_name"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "controlPlane": true,
                "machineDeploymentClass": {
                  "names": [
                    "openstack-alpha-1-28-v4"
                  ]
                }
              }
            }
          }
        ],
        "description": "Sets the name of the cloud to use from the clouds secret.",
        "enabledIf": "{{ ne .cloud_name \"\" }}",
        "name": "cloud_name"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/identityRef/name",
                "valueFrom": {
                  "variable": "secret_name"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackClusterTemplate",
              "matchResources": {
                "infrastructureCluster": true
              }
            }
          },
          {
            "jsonPatches": [
              {
                "op": "replace",
                "path": "/spec/template/spec/identityRef/name",
                "valueFrom": {
                  "variable": "secret_name"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "controlPlane": true,
                "machineDeploymentClass": {
                  "names": [
                    "openstack-alpha-1-28-v4"
                  ]
                }
              }
            }
          }
        ],
        "description": "Sets the name of the clouds secret.",
        "enabledIf": "{{ ne .secret_name \"\" }}",
        "name": "secret_name"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "add",
                "path": "/spec/template/spec/serverGroup",
                "valueFrom": {
                  "template": "id: {{ .controller_server_group_id }}\n"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "controlPlane": true
              }
            }
          }
        ],
        "description": "Sets the server group to assign the control plane nodes to.",
        "enabledIf": "{{ ne .controller_server_group_id \"\" }}",
        "name": "controller_server_group_id"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "add",
                "path": "/spec/template/spec/serverGroup",
                "valueFrom": {
                  "template": "id: {{ .worker_server_group_id }}\n"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "machineDeploymentClass": {
                  "names": [
                    "openstack-alpha-1-28-v4"
                  ]
                }
              }
            }
          }
        ],
        "description": "Sets the server group to assign the worker nodes to.",
        "enabledIf": "{{ ne .worker_server_group_id \"\" }}",
        "name": "worker_server_group_id"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "add",
                "path": "/spec/template/spec/sshKeyName",
                "valueFrom": {
                  "variable": "ssh_key"
                }
              }
            ],
            "selector": {
              "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
              "kind": "OpenStackMachineTemplate",
              "matchResources": {
                "controlPlane": true,
                "machineDeploymentClass": {
                  "names": [
                    "openstack-alpha-1-28-v4"
                  ]
                }
              }
            }
          }
        ],
        "description": "Sets the ssh key to inject in the nodes.",
        "enabledIf": "{{ ne .ssh_key \"\" }}",
        "name": "ssh_key"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "add",
                "path": "/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/certSANs",
                "valueFrom": {
                  "variable": "certSANs"
                }
              }
            ],
            "selector": {
              "apiVersion": "controlplane.cluster.x-k8s.io/v1beta1",
              "kind": "KubeadmControlPlaneTemplate",
              "matchResources": {
                "controlPlane": true
              }
            }
          }
        ],
        "description": "CertSANs sets extra Subject Alternative Names for the API Server signing cert.",
        "enabledIf": "{{ if .certSANs }}true{{end}}",
        "name": "certSANs"
      },
      {
        "definitions": [
          {
            "jsonPatches": [
              {
                "op": "add",
                "path": "/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/oidc-client-id",
                "valueFrom": {
                  "variable": "oidc_config.client_id"
                }
              },
              {
                "op": "add",
                "path": "/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/oidc-issuer-url",
                "valueFrom": {
                  "variable": "oidc_config.issuer_url"
                }
              },
              {
                "op": "add",
                "path": "/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/oidc-username-claim",
                "valueFrom": {
                  "variable": "oidc_config.username_claim"
                }
              },
              {
                "op": "add",
                "path": "/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/oidc-groups-claim",
                "valueFrom": {
                  "variable": "oidc_config.groups_claim"
                }
              },
              {
                "op": "add",
                "path": "/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/oidc-username-prefix",
                "valueFrom": {
                  "variable": "oidc_config.username_prefix"
                }
              },
              {
                "op": "add",
                "path": "/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/oidc-groups-prefix",
                "valueFrom": {
                  "variable": "oidc_config.groups_prefix"
                }
              }
            ],
            "selector": {
              "apiVersion": "controlplane.cluster.x-k8s.io/v1beta1",
              "kind": "KubeadmControlPlaneTemplate",
              "matchResources": {
                "controlPlane": true
              }
            }
          }
        ],
        "description": "Configure API Server to use external authentication service.",
        "enabledIf": "{{ if and .oidc_config .oidc_config.client_id .oidc_config.issuer_url }}true{{end}}",
        "name": "oidc_config"
      }
    ],
    "variables": [
      {
        "metadata": {},
        "name": "external_id",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": "ebfe5546-f09f-4f42-ab54-094e457d42ec",
            "description": "ExternalNetworkID is the ID of an external OpenStack Network. This is necessary to get public internet to the VMs.",
            "example": "ebfe5546-f09f-4f42-ab54-094e457d42ec",
            "format": "uuid4",
            "type": "string"
          }
        }
      },
      {
        "metadata": {},
        "name": "dns_nameservers",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": [
              "5.1.66.255",
              "185.150.99.255"
            ],
            "description": "DNSNameservers is the list of nameservers for the OpenStack Subnet being created. Set this value when you need to create a new network/subnet while the access through DNS is required.",
            "example": [
              "5.1.66.255",
              "185.150.99.255"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      {
        "metadata": {},
        "name": "controller_flavor",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": "SCS-2V-4-20",
            "description": "OpenStack instance flavor for control-plane nodes.",
            "example": "SCS-2V-4-20",
            "type": "string"
          }
        }
      },
      {
        "metadata": {},
        "name": "worker_flavor",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": "SCS-2V-4-20",
            "description": "OpenStack instance flavor for worker nodes.",
            "example": "SCS-2V-4-20",
            "type": "string"
          }
        }
      },
      {
        "metadata": {},
        "name": "controller_root_disk",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "description": "Root disk size in GiB for control-plane nodes. OpenStack volume will be created and used instead of an ephemeral disk defined in flavor. Should be used also for the diskless flavors.",
            "example": 20,
            "minimum": 1,
            "type": "integer"
          }
        }
      },
      {
        "metadata": {},
        "name": "worker_root_disk",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "description": "Root disk size in GiB for worker nodes. OpenStack volume will be created and used instead of an ephemeral disk defined in flavor. Should be used also for the diskless flavors.",
            "example": 20,
            "minimum": 1,
            "type": "integer"
          }
        }
      },
      {
        "metadata": {},
        "name": "node_cidr",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": "10.8.0.0/20",
            "description": "NodeCIDR is the OpenStack Subnet to be created. Cluster actuator will create a network, a subnet with NodeCIDR, and a router connected to this subnet. If you leave this empty, no network will be created.",
            "example": "10.8.0.0/20",
            "format": "cidr",
            "type": "string"
          }
        }
      },
      {
        "metadata": {},
        "name": "openstack_security_groups",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": [],
            "description": "The names of the security groups to assign to the instance",
            "example": [
              "security-group-1"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      {
        "metadata": {},
        "name": "openstack_loadbalancer_apiserver",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": true,
            "description": "Enables custom load balancer for OpenStack API server",
            "type": "boolean"
          }
        }
      },
      {
        "metadata": {},
        "name": "openstack_loadbalancer_apiserver_provider",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": "amphora",
            "description": "The name of the load balancer provider (amphora or ovn) to use (defaults to amphora)",
            "example": "ovn",
            "type": "string"
          }
        }
      },
      {
        "metadata": {},
        "name": "cloud_name",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": "openstack",
            "description": "The name of the cloud to use from the clouds secret",
            "example": "openstack",
            "type": "string"
          }
        }
      },
      {
        "metadata": {},
        "name": "secret_name",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": "openstack",
            "description": "The name of the clouds secret",
            "example": "openstack",
            "type": "string"
          }
        }
      },
      {
        "metadata": {},
        "name": "controller_server_group_id",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": "",
            "description": "The server group to assign the control plane nodes to.",
            "example": "3adf4e92-bb33-4e44-8ad3-afda9dfe8ec3",
            "type": "string"
          }
        }
      },
      {
        "metadata": {},
        "name": "worker_server_group_id",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": "",
            "description": "The server group to assign the worker nodes to.",
            "example": "869fe071-1e56-46a9-9166-47c9f228e297",
            "type": "string"
          }
        }
      },
      {
        "metadata": {},
        "name": "ssh_key",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": "",
            "description": "The ssh key to inject in the nodes.",
            "example": "capi-keypair",
            "type": "string"
          }
        }
      },
      {
        "metadata": {},
        "name": "certSANs",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "default": [],
            "description": "CertSANs sets extra Subject Alternative Names for the API Server signing cert.",
            "example": [
              "mydomain.example"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      {
        "metadata": {},
        "name": "oidc_config",
        "required": false,
        "schema": {
          "openAPIV3Schema": {
            "properties": {
              "client_id": {
                "description": "A client id that all tokens must be issued for.",
                "example": "kubectl",
                "type": "string"
              },
              "groups_claim": {
                "default": "groups",
                "description": "JWT claim to use as the user's group. If the claim is present it must be an array of strings.",
                "example": "groups",
                "type": "string"
              },
              "groups_prefix": {
                "default": "oidc:",
                "description": "Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra.",
                "example": "oidc:",
                "type": "string"
              },
              "issuer_url": {
                "description": "URL of the provider that allows the API server to discover public signing keys. Only URLs that use the https:// scheme are accepted. This is typically the provider's discovery URL, changed to have an empty path",
                "example": "https://dex.k8s.scs.community",
                "type": "string"
              },
              "username_claim": {
                "default": "sub",
                "description": "JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end user. Admins can choose other claims, such as email or name, depending on their provider. However, claims other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.",
                "example": "preferred_username",
                "type": "string"
              },
              "username_prefix": {
                "default": "oidc:",
                "description": "Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the value oidc: will create usernames like oidc:jane.doe. If this flag isn't provided and --oidc-username-claim is a value other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of --oidc-issuer-url. The value - can be used to disable all prefixing.",
                "example": "oidc:",
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      }
    ],
    "workers": {
      "machineDeployments": [
        {
          "class": "openstack-alpha-1-28-v4",
          "template": {
            "bootstrap": {
              "ref": {
                "apiVersion": "bootstrap.cluster.x-k8s.io/v1beta1",
                "kind": "KubeadmConfigTemplate",
                "name": "openstack-alpha-1-28-v4",
                "namespace": "kaas-playground0"
              }
            },
            "infrastructure": {
              "ref": {
                "apiVersion": "infrastructure.cluster.x-k8s.io/v1beta1",
                "kind": "OpenStackMachineTemplate",
                "name": "openstack-alpha-1-28-v4",
                "namespace": "kaas-playground0"
              }
            },
            "metadata": {}
          }
        }
      ]
    }
  },
  "status": {
    "conditions": [
      {
        "lastTransitionTime": "2024-06-26T15:04:00Z",
        "status": "True",
        "type": "RefVersionsUpToDate"
      },
      {
        "lastTransitionTime": "2024-06-26T15:04:00Z",
        "status": "True",
        "type": "VariablesReconciled"
      }
    ],
    "observedGeneration": 1,
    "variables": [
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": [],
                "description": "CertSANs sets extra Subject Alternative Names for the API Server signing cert.",
                "example": [
                  "mydomain.example"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "certSANs"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": "openstack",
                "description": "The name of the cloud to use from the clouds secret",
                "example": "openstack",
                "type": "string"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "cloud_name"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": "SCS-2V-4-20",
                "description": "OpenStack instance flavor for control-plane nodes.",
                "example": "SCS-2V-4-20",
                "type": "string"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "controller_flavor"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "description": "Root disk size in GiB for control-plane nodes. OpenStack volume will be created and used instead of an ephemeral disk defined in flavor. Should be used also for the diskless flavors.",
                "example": 20,
                "minimum": 1,
                "type": "integer"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "controller_root_disk"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": "",
                "description": "The server group to assign the control plane nodes to.",
                "example": "3adf4e92-bb33-4e44-8ad3-afda9dfe8ec3",
                "type": "string"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "controller_server_group_id"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": [
                  "5.1.66.255",
                  "185.150.99.255"
                ],
                "description": "DNSNameservers is the list of nameservers for the OpenStack Subnet being created. Set this value when you need to create a new network/subnet while the access through DNS is required.",
                "example": [
                  "5.1.66.255",
                  "185.150.99.255"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "dns_nameservers"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": "ebfe5546-f09f-4f42-ab54-094e457d42ec",
                "description": "ExternalNetworkID is the ID of an external OpenStack Network. This is necessary to get public internet to the VMs.",
                "example": "ebfe5546-f09f-4f42-ab54-094e457d42ec",
                "format": "uuid4",
                "type": "string"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "external_id"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": "10.8.0.0/20",
                "description": "NodeCIDR is the OpenStack Subnet to be created. Cluster actuator will create a network, a subnet with NodeCIDR, and a router connected to this subnet. If you leave this empty, no network will be created.",
                "example": "10.8.0.0/20",
                "format": "cidr",
                "type": "string"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "node_cidr"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "properties": {
                  "client_id": {
                    "description": "A client id that all tokens must be issued for.",
                    "example": "kubectl",
                    "type": "string"
                  },
                  "groups_claim": {
                    "default": "groups",
                    "description": "JWT claim to use as the user's group. If the claim is present it must be an array of strings.",
                    "example": "groups",
                    "type": "string"
                  },
                  "groups_prefix": {
                    "default": "oidc:",
                    "description": "Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra.",
                    "example": "oidc:",
                    "type": "string"
                  },
                  "issuer_url": {
                    "description": "URL of the provider that allows the API server to discover public signing keys. Only URLs that use the https:// scheme are accepted. This is typically the provider's discovery URL, changed to have an empty path",
                    "example": "https://dex.k8s.scs.community",
                    "type": "string"
                  },
                  "username_claim": {
                    "default": "sub",
                    "description": "JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end user. Admins can choose other claims, such as email or name, depending on their provider. However, claims other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.",
                    "example": "preferred_username",
                    "type": "string"
                  },
                  "username_prefix": {
                    "default": "oidc:",
                    "description": "Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the value oidc: will create usernames like oidc:jane.doe. If this flag isn't provided and --oidc-username-claim is a value other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of --oidc-issuer-url. The value - can be used to disable all prefixing.",
                    "example": "oidc:",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "oidc_config"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": true,
                "description": "Enables custom load balancer for OpenStack API server",
                "type": "boolean"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "openstack_loadbalancer_apiserver"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": "amphora",
                "description": "The name of the load balancer provider (amphora or ovn) to use (defaults to amphora)",
                "example": "ovn",
                "type": "string"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "openstack_loadbalancer_apiserver_provider"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": [],
                "description": "The names of the security groups to assign to the instance",
                "example": [
                  "security-group-1"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "openstack_security_groups"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": "openstack",
                "description": "The name of the clouds secret",
                "example": "openstack",
                "type": "string"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "secret_name"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": "",
                "description": "The ssh key to inject in the nodes.",
                "example": "capi-keypair",
                "type": "string"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "ssh_key"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": "SCS-2V-4-20",
                "description": "OpenStack instance flavor for worker nodes.",
                "example": "SCS-2V-4-20",
                "type": "string"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "worker_flavor"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "description": "Root disk size in GiB for worker nodes. OpenStack volume will be created and used instead of an ephemeral disk defined in flavor. Should be used also for the diskless flavors.",
                "example": 20,
                "minimum": 1,
                "type": "integer"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "worker_root_disk"
      },
      {
        "definitions": [
          {
            "from": "inline",
            "metadata": {},
            "required": false,
            "schema": {
              "openAPIV3Schema": {
                "default": "",
                "description": "The server group to assign the worker nodes to.",
                "example": "869fe071-1e56-46a9-9166-47c9f228e297",
                "type": "string"
              }
            }
          }
        ],
        "definitionsConflict": false,
        "name": "worker_server_group_id"
      }
    ]
  }
}